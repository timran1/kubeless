version: 2

## Definitions
build_allways: &build_allways
  filters:
    tags:
      only: /.*/
defaults: &defaults
  environment:
    CONTROLLER_IMAGE_NAME: kubeless/function-controller
    BUILDER_IMAGE_NAME: kubeless/function-image-builder
    CGO_ENABLED: "0"
    TEST_DEBUG: "1"
    GKE_VERSION: 1.12
    MINIKUBE_VERSION: v1.2.0
    MANIFESTS: kubeless kubeless-non-rbac kubeless-openshift
exports: &exports
  # It is not possible to resolve env vars in the environment section:
  # https://discuss.circleci.com/t/using-environment-variables-in-config-yml-not-working/14237
  run: |
    CONTROLLER_TAG=${CIRCLE_TAG:-build-$CIRCLE_WORKFLOW_ID}
    echo "export CONTROLLER_TAG=${CONTROLLER_TAG}" >> $BASH_ENV
    echo "export CONTROLLER_IMAGE=${CONTROLLER_IMAGE_NAME}:${CONTROLLER_TAG}" >> $BASH_ENV
    echo "export FUNCTION_IMAGE_BUILDER=${BUILDER_IMAGE_NAME}:${CONTROLLER_TAG}" >> $BASH_ENV
    echo "export KUBECFG_JPATH=/home/circleci/src/github.com/kubeless/kubeless/ksonnet-lib" >> $BASH_ENV
    echo "export PATH=$(pwd)/bats/libexec:$GOPATH/bin:$PATH" >> $BASH_ENV
    echo "export GIT_SHA1=${CIRCLE_SHA1}" >> $BASH_ENV
restore_workspace: &restore_workspace
  run: |
    make bootstrap
    sudo cp -r /tmp/go/bin/* /usr/local/bin/
    cp -r /tmp/go/*yaml .
#### End of definitions

workflows:
  version: 2
  kubeless:
    jobs:
      - build:
          <<: *build_allways
      - minikube:
          <<: *build_allways
          requires:
            - build
      - build-cross-binaries:
          <<: *build_allways
          requires:
            - build
      - minikube_build_functions:
          <<: *build_allways
          requires:
            - build
      - GKE:
          <<: *build_allways
          requires:
            - build
      - push_latest_images:
          filters:
            branches:
              only: master
          requires:
            - minikube
            - minikube_build_functions
            - GKE
      - release:
          filters:
            tags:
              only: /v.*/
            branches:
              ignore: /.*/
          requires:
            - minikube
            - minikube_build_functions
            - GKE
jobs:
  build:
    <<: *defaults
    docker:
      - image: circleci/golang:1.15
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - <<: *exports
      - run: go mod download
      - run: make bootstrap
      - run: make VERSION=${CONTROLLER_TAG} binary
      - run: make test
      - run: make validation
      - run: make all-yaml
      - run: |
          mkdir build-manifests
          IFS=' ' read -r -a manifests <<< "$MANIFESTS"
          for f in "${manifests[@]}"; do
            sed -i.bak 's/:latest/'":${CONTROLLER_TAG}"'/g' ${f}.yaml
            cp ${f}.yaml build-manifests/
          done
      - persist_to_workspace:
          root: /go
          paths:
            - ./bin
      - persist_to_workspace:
          root: ./
          paths:
            - ./*yaml
      - store_artifacts:
          path: /go/bin/kubeless
          destination: ./bin/kubeless
      - store_artifacts:
          path: ./build-manifests/
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod
  minikube:
    <<: *defaults
    machine:
      image: ubuntu-1604:202007-01
    steps:
      - checkout
      - run: sudo apt-get update -y
      - run: sudo apt-get install -y tar gzip bzip2 xz-utils
      - attach_workspace:
          at: /tmp/go
      - <<: *exports
      - <<: *restore_workspace
      - run: ./script/pull-or-build-image.sh function-controller
      - run: ./script/integration-tests minikube deployment
      - run: ./script/integration-tests minikube basic
  build-cross-binaries:
    <<: *defaults
    docker:
      - image: circleci/golang:1.15
    steps:
      - <<: *exports
      - checkout
      - attach_workspace:
          at: /tmp/go
      - <<: *restore_workspace
      - run: make VERSION=${CIRCLE_TAG} binary-cross
      - store_artifacts:
          path: bundles
  minikube_build_functions:
    <<: *defaults
    machine:
      image: ubuntu-1604:202007-01
    steps:
      - checkout
      - <<: *exports
      - attach_workspace:
          at: /tmp/go
      - <<: *restore_workspace
      - run: ./script/pull-or-build-image.sh function-controller
      - run: ./script/pull-or-build-image.sh function-image-builder
      - run: "echo '{\"insecure-registries\" : [\"0.0.0.0/0\"]}' > /tmp/daemon.json"
      - run: sudo mv /tmp/daemon.json /etc/docker/daemon.json
      - run: sudo service docker restart
      - run: docker info
      - run: docker run -d -p 5000:5000 --restart=always --name registry -v /data/docker-registry:/var/lib/registry registry:2
      - run: "sed -i.bak 's/enable-build-step: \"false\"/enable-build-step: \"true\"/g' kubeless.yaml"
      - run: "sed -i.bak 's/function-registry-tls-verify: \"true\"/function-registry-tls-verify: \"false\"/g' kubeless.yaml"
      - run: ./script/integration-tests minikube deployment
      - run: ./script/integration-tests minikube prebuilt_functions
  GKE:
    <<: *defaults
    docker:
      - image: circleci/golang:1.15
    steps:
      - run: |
          # In case of GKE we will only want to build if it is
          # a build of a branch in the kubeless/kubeless repository
          if [[ -n "$GKE_ADMIN" && -z "$CIRCLE_PULL_REQUESTS" ]]; then
            export SHOULD_TEST=1
          fi
          if [[ "$SHOULD_TEST" != "1" ]]; then
            circleci step halt
          fi
      - checkout
      - <<: *exports
      - attach_workspace:
          at: /tmp/go
      - <<: *restore_workspace
      - setup_remote_docker
      - run: ./script/enable-gcloud.sh $(pwd) > /dev/null
      - run: echo "export ESCAPED_GKE_CLUSTER=$(echo ${GKE_CLUSTER}-ci-${CIRCLE_BRANCH:-$CIRCLE_TAG} | sed 's/[^a-z0-9-]//g')" >> $BASH_ENV
      - run: ./script/start-gke-env.sh $ESCAPED_GKE_CLUSTER $ZONE $GKE_VERSION $GKE_ADMIN > /dev/null
      - run: ./script/pull-or-build-image.sh function-controller
      - run: ./script/integration-tests gke_${GKE_PROJECT}_${ZONE}_${ESCAPED_GKE_CLUSTER} deployment
      - run: ./script/integration-tests gke_${GKE_PROJECT}_${ZONE}_${ESCAPED_GKE_CLUSTER} basic
      - run: ./script/integration-tests gke_${GKE_PROJECT}_${ZONE}_${ESCAPED_GKE_CLUSTER} cronjob
  push_latest_images:
    <<: *defaults
    docker:
      - image: circleci/golang:1.15
    steps:
      - <<: *exports
      - setup_remote_docker
      - run: docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"   
      - run: |
          images=( 
            $CONTROLLER_IMAGE_NAME
            $BUILDER_IMAGE_NAME 
          )
          for image in "${images[@]}"; do
            echo "Pulling ${image}:${CONTROLLER_TAG}"
            docker pull ${image}:${CONTROLLER_TAG}
            docker tag ${image}:${CONTROLLER_TAG} ${image}:latest
            docker push ${image}:latest
          done
  release:
    <<: *defaults
    docker:
      - image: circleci/golang:1.15
    steps:
      - <<: *exports
      - checkout
      - attach_workspace:
          at: /tmp/go
      - <<: *restore_workspace
      - run: make VERSION=${CIRCLE_TAG} binary-cross
      - run: for d in bundles/kubeless_*; do zip -r9 $d.zip $d/; done
      - run: ./script/create_release.sh ${CIRCLE_TAG} "${MANIFESTS}"
